glarma_nb <- glarma(y, X3, thetaLags = NULL, phiLags = 3, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, X3, thetaLags = NULL, phiLags = c(3,12), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
# Pacote necessário
library(glarma)
# Função para otimizar parâmetros
otimiza_glarma <- function(y, X, phiLags_list, thetaLags_list, maxit = 100, grad = 1e-6) {
# Lista para armazenar resultados
resultados <- list()
# Variável para armazenar o menor AIC e os melhores parâmetros
melhor_aic <- Inf
melhor_modelo <- NULL
melhor_phiLags <- NULL
melhor_thetaLags <- NULL
# Loop sobre combinações de phiLags e thetaLags
for (phiLags in phiLags_list) {
for (thetaLags in thetaLags_list) {
# Tente ajustar o modelo, com tratamento para erros
tryCatch({
modelo <- glarma(y, X, thetaLags = thetaLags, phiLags = phiLags,
type = "NegBin", method = "FS",
residuals = "Pearson", maxit = maxit, grad = grad)
# Calcule o AIC do modelo
aic_atual <- AIC(modelo)
# Armazene os resultados
resultados[[paste("phiLags:", phiLags, "thetaLags:", thetaLags)]] <- list(
modelo = modelo,
AIC = aic_atual,
phiLags = phiLags,
thetaLags = thetaLags
)
# Atualize o melhor modelo, se aplicável
if (aic_atual < melhor_aic) {
melhor_aic <- aic_atual
melhor_modelo <- modelo
melhor_phiLags <- phiLags
melhor_thetaLags <- thetaLags
}
}, error = function(e) {
message("Erro ao ajustar o modelo para phiLags = ", phiLags, " e thetaLags = ", thetaLags,
". Mensagem: ", e$message)
})
}
}
# Retorne os resultados
list(
melhor_modelo = melhor_modelo,
melhor_phiLags = melhor_phiLags,
melhor_thetaLags = melhor_thetaLags,
melhor_aic = melhor_aic,
todos_resultados = resultados
)
}
phiLags_list <- c(1,2,3,4,5,6,7,8,9,10,11,12)
thetaLags_list <- c(1,2,3,4,5,6,7,8,9,10,11,12)
otimiza_glarma(y,X3,phiLags_list, thetaLags_list, maxit = 100, grad = 1e-6)
phiLags_list <- list(c(3), c(3, 12), c(1, 6))
thetaLags_list <- list(NULL, c(1), c(1, 2))
otimiza_glarma(y,X3,phiLags_list, thetaLags_list, maxit = 100, grad = 1e-6)
resultado <- otimiza_glarma(y,X3,phiLags_list, thetaLags_list, maxit = 100, grad = 1e-6)
resultado$melhor_phiLags
phiLags_list <- list(NULL, c(3), c(6), c(12), c(9), c(3, 12), c(1, 6), c(6,12), c(3,6), c(6,12))
thetaLags_list <- list(NULL, c(3), c(6), c(12), c(9), c(3, 12), c(1, 6), c(6,12), c(3,6), c(6,12))
resultado <- otimiza_glarma(y,X3,phiLags_list, thetaLags_list, maxit = 100, grad = 1e-6)
resultado$melhor_phiLags
rm(resultado)
rm(phiLags_list)
rm(thetaLags_list)
y <- df[,1]
X1 <- as.matrix(df[,4])
X2 <- as.matrix(df[,7])
Trend <- 1:84
Intercepto <- rep(1,84)
X3 <- cbind(Intercepto, Trend, X1, X2, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X3) <- c("Intercepto", "Trend", "NO", "O3", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X3, thetaLags = NULL, phiLags = c(3,12), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
y <- df[,1]
X1 <- as.matrix(df[,7])
Trend <- 1:84
Intercepto <- rep(1,84)
X1 <- cbind(Intercepto, Trend, X1, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X1) <- c("Intercepto", "Trend", "O3", "cos6", "cos12", "sen6", "sen12")
y <- df[,1]
X4 <- as.matrix(df[,7])
Trend <- 1:84
Intercepto <- rep(1,84)
X1 <- cbind(Intercepto, Trend, X1, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X1) <- c("Intercepto", "Trend", "O3", "cos6", "cos12", "sen6", "sen12")
y <- df[,1]
X4 <- as.matrix(df[,7])
Trend <- 1:84
Intercepto <- rep(1,84)
X1 <- cbind(Intercepto, Trend, X4, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X1) <- c("Intercepto", "Trend", "O3", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X4, thetaLags = NULL, phiLags = c(3,12), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
X1 <- cbind(Intercepto, Trend, X4, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X1) <- c("Intercepto", "Trend", "O3", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X4, thetaLags = NULL, phiLags = c(3,12), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb
summary(glarma_nb)
glarma_nb
y <- df[,1]
X2 <- as.matrix(df[,7])
Trend <- 1:84
Intercepto <- rep(1,84)
X2 <- cbind(Intercepto, Trend, X2, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X2) <- c("Intercepto", "Trend", "NOX", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X2, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
y <- df[,1]
X2 <- as.matrix(df[,6])
Trend <- 1:84
Intercepto <- rep(1,84)
X2 <- cbind(Intercepto, Trend, X2, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X2) <- c("Intercepto", "Trend", "NOX", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X2, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
y <- df[,1]
X2 <- as.matrix(df[,7])
Trend <- 1:84
Intercepto <- rep(1,84)
X2 <- cbind(Intercepto, Trend, X2, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X2) <- c("Intercepto", "Trend", "O3", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X2, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, X2, thetaLags = NULL, phiLags = 3, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, X2, thetaLags = NULL, phiLags = 12, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
# Função para otimizar parâmetros
otimiza_glarma <- function(y, X, phiLags_list, thetaLags_list, maxit = 100, grad = 1e-6) {
# Lista para armazenar resultados
resultados <- list()
# Variável para armazenar o menor AIC e os melhores parâmetros
melhor_aic <- Inf
melhor_modelo <- NULL
melhor_phiLags <- NULL
melhor_thetaLags <- NULL
# Loop sobre combinações de phiLags e thetaLags
for (phiLags in phiLags_list) {
for (thetaLags in thetaLags_list) {
# Tente ajustar o modelo, com tratamento para erros
tryCatch({
modelo <- glarma(y, X, thetaLags = thetaLags, phiLags = phiLags,
type = "NegBin", method = "FS",
residuals = "Pearson", maxit = maxit, grad = grad)
# Calcule o AIC do modelo
aic_atual <- AIC(modelo)
# Armazene os resultados
resultados[[paste("phiLags:", phiLags, "thetaLags:", thetaLags)]] <- list(
modelo = modelo,
AIC = aic_atual,
phiLags = phiLags,
thetaLags = thetaLags
)
# Atualize o melhor modelo, se aplicável
if (aic_atual < melhor_aic) {
melhor_aic <- aic_atual
melhor_modelo <- modelo
melhor_phiLags <- phiLags
melhor_thetaLags <- thetaLags
}
}, error = function(e) {
message("Erro ao ajustar o modelo para phiLags = ", phiLags, " e thetaLags = ", thetaLags,
". Mensagem: ", e$message)
})
}
}
# Retorne os resultados
list(
melhor_modelo = melhor_modelo,
melhor_phiLags = melhor_phiLags,
melhor_thetaLags = melhor_thetaLags,
melhor_aic = melhor_aic,
todos_resultados = resultados
)
}
phiLags_list = list(NULL)
thetaLags_list = list(c(1), c(2), c(3), c(4), c(5), c(6), c(7), c(8), c(9), c(10), c(11), c(12))
resultado <- otimiza_glarma(y, X2, phiLags_list, thetaLags_list)
resultado$melhor_phiLags
phiLags_list = list(NULL)
thetaLags_list = list(1:12)
resultado <- otimiza_glarma(y, X2, phiLags_list, thetaLags_list)
phiLags_list = list(NULL)
thetaLags_list = list(1,2,3,4,5,6,7,8,9,10,11,12)
resultado <- otimiza_glarma(y, X2, phiLags_list, thetaLags_list)
phiLags_list = list(NULL)
thetaLags_list = list(c(3,12))
resultado <- otimiza_glarma(y, X2, phiLags_list, thetaLags_list)
resultado$melhor_phiLags
resultado <- otimiza_glarma(y, X2, phiLags_list, thetaLags_list)
phiLags_list = list(c(1))
thetaLags_list = list(c(3,12))
resultado <- otimiza_glarma(y, X2, phiLags_list, thetaLags_list)
y <- df[,1]
X2 <- as.matrix(df[,6])
Trend <- 1:84
Intercepto <- rep(1,84)
X2 <- cbind(Intercepto, Trend, X2, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X2) <- c("Intercepto", "Trend", "NOX", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X2, thetaLags = NULL, phiLags = 12, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, X2, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
y <- df[,1]
X2 <- as.matrix(df[,6])
Trend <- 1:84
Intercepto <- rep(1,84)
X2 <- cbind(Intercepto, Trend, X2, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X2) <- c("Intercepto", "Trend", "NOX", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X2, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow = c(2, 1))
acf(glarma_nb$residuals)
pacf(glarma_nb$residuals)
par(mfrow=c(2,3))
plot(glarma_nb)
y <- df[,1]
X1 <- as.matrix(df[,4])
Trend <- 1:84
Intercepto <- rep(1,84)
X1 <- cbind(Intercepto, Trend, X1, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X1) <- c("Intercepto", "Trend", "NO", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X1, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
y <- df[,1]
X1 <- as.matrix(df[,4])
Trend <- 1:84
Intercepto <- rep(1,84)
X1 <- cbind(Intercepto, Trend, X1, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X1) <- c("Intercepto", "Trend", "NO", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X1, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
y <- df[,1]
X1 <- as.matrix(df[,4])
Trend <- 1:84
Intercepto <- rep(1,84)
X1 <- cbind(Intercepto, Trend, X1, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X1) <- c("Intercepto", "Trend", "NO", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X1, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
install.packages("glarma")
require(kableExtra)
install.packages("kableExtra")
install.packages("Hmisc")
install.packages("performance")
plot(df)
plot(poluentes)
View(df)
y <- df[,1]
X1 <- as.matrix(df[,4])
X2 <- as.matrix(df[,6])
Trend <- 1:84
Intercepto <- rep(1,84)
X3 <- cbind(Intercepto, Trend, X1, X2, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X3) <- c("Intercepto", "Trend", "NO", "NOX", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X3, thetaLags = NULL, phiLags = c(3,12), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
require(glarma)
require(kableExtra)
require(tidyverse)
require(Hmisc)
glarma_nb <- glarma(y, X3, thetaLags = NULL, phiLags = c(3,12), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
plot(poluentes)
plot(poluentes)
y <- df[,1]
X1 <- as.matrix(df[,4])
X2 <- as.matrix(df[,6])
Trend <- 1:84
Intercepto <- rep(1,84)
X3 <- cbind(Intercepto, Trend, X1, X2, df$cos6, df$cos12, df$sen6, df$sen12)
colnames(X3) <- c("Intercepto", "Trend", "NO", "NOX", "cos6", "cos12", "sen6", "sen12")
glarma_nb <- glarma(y, X3, thetaLags = NULL, phiLags = c(3,12), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
require(glarma)
require(kableExtra)
require(tidyverse)
require(Hmisc)
glarma_nb <- glarma(y, X3, thetaLags = NULL, phiLags = c(3,12), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
plot(poluentes)
require(glarma)
require(kableExtra)
require(tidyverse)
require(Hmisc)
prcomp(cor_matrix)
View(cor_matrix)
data <- cor(poluentes[,2:9])
prcomp(data)
prcomp(data,  center = TRUE, scale. = TRUE))
prcomp(data,  center = TRUE, scale = TRUE))
prcomp(data,  center = TRUE, scale = TRUE)
a <- prcomp(data,  center = TRUE, scale = TRUE)
attributes(a)
a$x
a <- prcomp(data)
a$x
a <- prcomp(data)
a$x
install.packages(c("FactoMineR", "factoextra")
install.packages(c("FactoMineR", "factoextra"))
install.packages(c("FactoMineR", "factoextra"))
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:9]
PCA(poluentes, graph = TRUE)
FactoMineR::PCA(poluentes, graph = TRUE)
FactoMineR::PCA(poluentes, graph = F)
res.pca <- FactoMineR::PCA(poluentes, graph = F)
View(res.pca)
res.pca$eig
print(res.pca)
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 50))
eig.val <- get_eigenvalue(res.pca)
eig.val
library("FactoMineR")
library("factoextra")
eig.val <- factoextra::get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 50))
var <- get_pca_var(res.pca)
var
var
# Coordinates
head(var$coord)
# Cos2: quality on the factore map
head(var$cos2)
# Contributions to the principal components
head(var$contrib)
remove.packages("factoextra")
res.pca <- FactoMineR::PCA(poluentes, graph = F)
res.pca$eig
poluentes <- scale(df[, 2:9])
res.pca <- FactoMineR::PCA(poluentes, graph = F)
res.pca$eig
res.pca$var
res.pca$eig
corr_matrix <- cor(poluentes)
a <- prcomp(corr_matrix)
a
a$x
?prcomp
biplot(prcomp(corr_matrix))
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:9]
matrix <-  rcorr(as.matrix(poluentes))
matrix <-  cor(as.matrix(poluentes))
install.packages("corrr")
install.packages("ggcorrplot")
install.packages("FactoMineR")
library(corrr)
library(ggcorrplot)
library(FactoMineR)
df <- read.delim("Data_CPDO.txt")
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:9]
corr_matrix <- cor(as.matrix(poluentes))
ggcorrplot(corr_matrix)
data.pca <- princomp(corr_matrix)
summary(data.pca)
fviz_eig(data.pca, addlabels = TRUE)
install.packages("factoextra")
library(factoextra)
fviz_eig(data.pca, addlabels = TRUE)
fviz_pca_var(data.pca, col.var = "black")
fviz_cos2(data.pca, choice = "var", axes = 1:2)
fviz_pca_var(data.pca, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE)
num_pc <- which(cumsum(summary(data.pca)$importance[2,]) >= 0.80)[1]
# Obter as coordenadas dos componentes principais
pc_data <- data.frame(data.pca$scores[, 1:num_pc])  # Selecionando os primeiros 'num_pc' PCs
num_pc <- which(cumsum(summary(data.pca)$importance[2,]) >= 0.80)[1]
# Obter as coordenadas dos componentes principais
pc_data <- data.frame(data.pca$scores[, 1:num_pc])  # Selecionando os primeiros 'num_pc' PCs
data.pca$scores
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:9]
corr_matrix <- cor(as.matrix(poluentes))
pca_result <- prcomp(X, center = TRUE, scale. = TRUE)
pca_result <- prcomp(poluentes, center = TRUE, scale. = TRUE)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.7)[1]  # 90% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
View(pca_vars)
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 90% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
View(pca_vars)
corr_matrix <- cor(as.matrix(poluentes))
data.pca <- princomp(corr_matrix)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(data.pca)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 90% da variância explicada
pca_result
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 90% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
# Suponha que sua variável resposta seja `y` (primeira coluna do conjunto de dados)
y <- df[, 1]
# Preparar o novo conjunto de dados
df_pca <- data.frame(y, pca_vars)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = dados_pca$y,
X = as.matrix(dados_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = df_pca$y,
X = as.matrix(df_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
require(glarma)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = df_pca$y,
X = as.matrix(df_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
View(df_pca)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = df_pca$y,
X = as.matrix(df_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
library(glarma)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = df_pca$y,
X = as.matrix(df_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(y = dados_pca$y, X2 = as.matrix(dados_pca[, -1]), thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(y = dados_pca$y, X = as.matrix(dados_pca[, -1]), thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(y = df_pca$y, X = as.matrix(df_pca[, -1]), thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
