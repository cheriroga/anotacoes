View(cor_matrix)
data <- cor(poluentes[,2:9])
prcomp(data)
prcomp(data,  center = TRUE, scale. = TRUE))
prcomp(data,  center = TRUE, scale = TRUE))
prcomp(data,  center = TRUE, scale = TRUE)
a <- prcomp(data,  center = TRUE, scale = TRUE)
attributes(a)
a$x
a <- prcomp(data)
a$x
a <- prcomp(data)
a$x
install.packages(c("FactoMineR", "factoextra")
install.packages(c("FactoMineR", "factoextra"))
install.packages(c("FactoMineR", "factoextra"))
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:9]
PCA(poluentes, graph = TRUE)
FactoMineR::PCA(poluentes, graph = TRUE)
FactoMineR::PCA(poluentes, graph = F)
res.pca <- FactoMineR::PCA(poluentes, graph = F)
View(res.pca)
res.pca$eig
print(res.pca)
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 50))
eig.val <- get_eigenvalue(res.pca)
eig.val
library("FactoMineR")
library("factoextra")
eig.val <- factoextra::get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 50))
var <- get_pca_var(res.pca)
var
var
# Coordinates
head(var$coord)
# Cos2: quality on the factore map
head(var$cos2)
# Contributions to the principal components
head(var$contrib)
remove.packages("factoextra")
res.pca <- FactoMineR::PCA(poluentes, graph = F)
res.pca$eig
poluentes <- scale(df[, 2:9])
res.pca <- FactoMineR::PCA(poluentes, graph = F)
res.pca$eig
res.pca$var
res.pca$eig
corr_matrix <- cor(poluentes)
a <- prcomp(corr_matrix)
a
a$x
?prcomp
biplot(prcomp(corr_matrix))
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:9]
matrix <-  rcorr(as.matrix(poluentes))
matrix <-  cor(as.matrix(poluentes))
install.packages("corrr")
install.packages("ggcorrplot")
install.packages("FactoMineR")
library(corrr)
library(ggcorrplot)
library(FactoMineR)
df <- read.delim("Data_CPDO.txt")
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:9]
corr_matrix <- cor(as.matrix(poluentes))
ggcorrplot(corr_matrix)
data.pca <- princomp(corr_matrix)
summary(data.pca)
fviz_eig(data.pca, addlabels = TRUE)
install.packages("factoextra")
library(factoextra)
fviz_eig(data.pca, addlabels = TRUE)
fviz_pca_var(data.pca, col.var = "black")
fviz_cos2(data.pca, choice = "var", axes = 1:2)
fviz_pca_var(data.pca, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE)
num_pc <- which(cumsum(summary(data.pca)$importance[2,]) >= 0.80)[1]
# Obter as coordenadas dos componentes principais
pc_data <- data.frame(data.pca$scores[, 1:num_pc])  # Selecionando os primeiros 'num_pc' PCs
num_pc <- which(cumsum(summary(data.pca)$importance[2,]) >= 0.80)[1]
# Obter as coordenadas dos componentes principais
pc_data <- data.frame(data.pca$scores[, 1:num_pc])  # Selecionando os primeiros 'num_pc' PCs
data.pca$scores
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:9]
corr_matrix <- cor(as.matrix(poluentes))
pca_result <- prcomp(X, center = TRUE, scale. = TRUE)
pca_result <- prcomp(poluentes, center = TRUE, scale. = TRUE)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.7)[1]  # 90% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
View(pca_vars)
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 90% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
View(pca_vars)
corr_matrix <- cor(as.matrix(poluentes))
data.pca <- princomp(corr_matrix)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(data.pca)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 90% da variância explicada
pca_result
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 90% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
# Suponha que sua variável resposta seja `y` (primeira coluna do conjunto de dados)
y <- df[, 1]
# Preparar o novo conjunto de dados
df_pca <- data.frame(y, pca_vars)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = dados_pca$y,
X = as.matrix(dados_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = df_pca$y,
X = as.matrix(df_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
require(glarma)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = df_pca$y,
X = as.matrix(df_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
View(df_pca)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = df_pca$y,
X = as.matrix(df_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
library(glarma)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(
y = df_pca$y,
X = as.matrix(df_pca[, -1]),  # Preditores (componentes principais)
type = "Poisson",               # Escolha o tipo de modelo adequado
phiLags = c(1, 2),              # Defina os lags de AR
thetaLags = c(1)                # Defina os lags de MA
)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(y = dados_pca$y, X2 = as.matrix(dados_pca[, -1]), thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(y = dados_pca$y, X = as.matrix(dados_pca[, -1]), thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
# Ajustar o modelo GLARMA
modelo_glarma <- glarma(y = df_pca$y, X = as.matrix(df_pca[, -1]), thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(glarma)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:7]
pca_result <- prcomp(poluentes, center = TRUE, scale. = TRUE)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 80% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
Trend <- 1:84
df_pca <- as.matrix(cbind(pca_vars, df[,8:13], Trend))
y <- df[, 1]
glarma_poi <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "Poi",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_poi)
par(mfrow=c(2,3))
plot(glarma_poi)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 6, phiLags = 7, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 7, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 6, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 1, phiLags = 6, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = c(6,7), phiLags = NULL, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 6, phiLags = NULL, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 6, phiLags = c(1,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 6, phiLags = 7, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 6, phiLags = NULL, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 1, phiLags = NULL, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(2,5), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 1, phiLags = 3, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 1, phiLags = 4, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 1, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:6]
pca_result <- prcomp(poluentes, center = TRUE, scale. = TRUE)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 80% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
Trend <- 1:84
df_pca <- as.matrix(cbind(pca_vars, df[,8:13], Trend))
y <- df[, 1]
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 2, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 3, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 4, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 5, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 6, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 7, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 8, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 9, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 1, phiLags = NULL, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 2, phiLags = NULL, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = c(2,7), phiLags = NULL, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 6, phiLags = 7, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 6, phiLags = 8, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
df <- read.delim("Data_CPDO.txt")
poluentes <- df[, 2:7]
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
pca_result <- prcomp(poluentes, center = TRUE, scale. = TRUE)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 80% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
Trend <- 1:84
df_pca <- as.matrix(cbind(pca_vars, df[,8:13], Trend))
y <- df[, 1]
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
par(mfrow=c(2,3))
plot(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(1, 6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
pacf(glarma_nb$residuals)
acf(glarma_nb$residuals)
glarma_nb <- glarma(y, df_pca, thetaLags = 1, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
View(df)
pca_result <- prcomp(poluentes, center = TRUE, scale. = TRUE)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 80% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
pca_vars
pca_result <- prcomp(poluentes, center = TRUE, scale. = TRUE)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.9)[1]  # 80% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
pca_vars
Trend <- 1:84
df_pca <- as.matrix(cbind(pca_vars, df[,8:13], Trend))
y <- df[, 1]
glarma_nb <- glarma(y, df_pca, thetaLags = 1, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
View(df)
poluentes <- cbind(df[, 2:4], df[, 7])
View(poluentes)
View(df)
poluentes <- cbind(df[, 2:5], df[, 7])
View(poluentes)
df <- read.delim("Data_CPDO.txt")
poluentes <- cbind(df[, 2:5], df[, 7])
pca_result <- prcomp(poluentes, center = TRUE, scale. = TRUE)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.9)[1]  # 80% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
pca_vars
Trend <- 1:84
df_pca <- as.matrix(cbind(pca_vars, df[,8:13], Trend))
y <- df[, 1]
Trend <- 1:84
df_pca <- as.matrix(cbind(pca_vars, df[,8:13], Trend))
y <- df[, 1]
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
pca_result <- prcomp(poluentes, center = TRUE, scale. = TRUE)
# Selecionar os primeiros componentes principais (com base em variância explicada, por exemplo)
variancia_explicada <- summary(pca_result)$importance[2, ]  # Proporção da variância explicada
num_componentes <- which(cumsum(variancia_explicada) >= 0.8)[1]  # 80% da variância explicada
pca_vars <- pca_result$x[, 1:num_componentes]  # Seleciona os componentes principais
pca_vars
Trend <- 1:84
df_pca <- as.matrix(cbind(pca_vars, df[,8:13], Trend))
y <- df[, 1]
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(6,7), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = 1, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = NULL, phiLags = c(1,2), type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
glarma_nb <- glarma(y, df_pca, thetaLags = 1, phiLags = NULL, type = "NegBin",
method = "FS", residuals= "Pearson",
maxit = 100, grad = 1e-6)
summary(glarma_nb)
library(MASS)
library(glarma)
library(tidyverse)
library(performance)
library(MASS)
df <- read.table("Data_CPDO.txt")
df
glimpse(df)
library(kableExtra)
kable(df)
df %>%
kbl() %>%
kable_styling()
df %>%
kbl() %>%
kable_material(c("striped", "hover"))
y <- df[, 1]
y <- df[, 1]
X <- as.matrix(df[, 2:13])
View(X)
y <- df[, 1] #bronq_aguda
X <- as.matrix(df[, 2:13]) #poluentes e outros fatores de comparação
glm_poi <- glm(y ~ X, family = poisson(link = "log"))
summary(glm_poi)
par(mfrow = c(2, 1))
acf(glm_poi$residuals)
pacf(glm_poi$residuals)
par(mfrow = c(2, 1))
acf(glm_poi$residuals)
pacf(glm_poi$residuals)
par(mfrow = c(2, 2))
plot(glm_poi)
check_overdispersion(glm_poi)
check_zeroinflation(glm_poi)
check_zeroinflation(glm_poi)
glm_nb <- glm.nb(y ~ X)
summary(glm_nb)
par(mfrow = c(2, 1))
acf(glm_nb$residuals)
pacf(glm_nb$residuals)
par(mfrow = c(2, 2))
plot(glm_nb)
par(mfrow = c(2, 2))
plot(glm_poi)
par(mfrow = c(2, 1))
acf(glm_poi$residuals)
pacf(glm_poi$residuals)
check_overdispersion(glm_poi)
library(glarma)
library(kableExtra)
library(performance)
library(MASS)
check_overdispersion(glm_nb)
install.packages("DHARMa")
check_overdispersion(glm_nb)
check_zeroinflation(glm_nb)
